<?xml version="1.0" encoding="utf-8"?>
<configuration>

  <configSections>
    <section name="aspectEndpoints" type="Nerdle.AutoConfig.Section, Nerdle.AutoConfig" />
    <section name="uploaderServiceConfig" type="Nerdle.AutoConfig.Section, Nerdle.AutoConfig" />
    <section name="inputSourceConfig" type="Nerdle.AutoConfig.Section, Nerdle.AutoConfig" />
    <section name="uploaderConfig" type="Nerdle.AutoConfig.Section, Nerdle.AutoConfig" />
    <section name="rabbitMqMessageSink" type="Nerdle.AutoConfig.Section, Nerdle.AutoConfig" />
    <section name="emailMessageSink" type="Nerdle.AutoConfig.Section, Nerdle.AutoConfig" />
    <section name="nlog" type="NLog.Config.ConfigSectionHandler, NLog" />
  </configSections>

  <startup> 
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.7.2" />
  </startup>
  
  <!-- forceUploadTradeDates: by default the uploader treats prices with trade dates older than the previous day as errors. Set this to true to force the upload of any old trade dates found. -->
  <!-- uploadChunkSize: Sets the number of options that are uploaded in each batch -->
  <!-- maxOptionsToUpload: Set this to a positive number to limit the number of prices that are uploaded, -1 == all prices found -->
  <!-- optionsToSkip: Set this to (> 0) if you want to skip rows from the input files (eg for testing) -->
  <!-- dryRun: Set this to true if you want to log only but not actually upload the prices -->
  <!-- markProcessedOnceUploaded: Set this to true to indicate that an input file should be marked as processed by the input source once uploaded -->
  <!-- 
    tradeDateMapping: How the Trade Date in the file is mapped to the Aspect day:
    | AsInFile -> Leave the date as-is. Since the settlement prices are released at the end of the day this will upload to "previous-working-day"
    | NextWorkingDay -> Move the tradeDate to the next working day. This will generally match the day the file is uploaded.
    | Today -> Set the Aspect day as DateTime.Today, so the upload will always appear as today's Option Values. Reliable, but prevents historic backfilling
    | AsInFileAndToday -> Uploads 2 prices, one for the trade date in the file and one with today's date
  -->
  <uploaderConfig forceUploadOldTradeDates="false" tradeDateMapping="AsInFile" uploadChunkSize="1000" maxOptionsToUpload="100" optionsToSkip="0" dryRun="true" markProcessedOnceUploaded="false" waitIntervalBetweenBatchesMs="250" defaultPricingGroup="SYSTEM" />

  <uploaderServiceConfig pollingIntervalSeconds="10" runAsLocalSystem="true" serviceStart="Manual" serviceDescription="(DEBUG) AspectOptionsUploader" serviceDisplayName="(DEBUG) Aspect Options Uploader" serviceName="DEBUG_AspectOptionsUploader" />

  <inputSourceConfig>
    <fileInputSources>
      <fileInputSource type="IceDatFile" inputDirectory="C:\temp\aspect\icedatfile" fileReadRetryAttempts="5" initialRetryDelayMs="1000" />
      <fileInputSource type="NymexOptionFile" inputDirectory="C:\temp\aspect\cmeUploadFile" fileReadRetryAttempts="5" initialRetryDelayMs="1000" />
    </fileInputSources>
    <testInputSources>
      <!--<testInputSource type="typeParameterNotUsed" />-->
    </testInputSources>
  </inputSourceConfig>

  <!-- 
    Use the plainTextCredentials element with username and password attributes for plain text creds.
    To generate the encrypted text, iv and key run the Prax.AesEncrypt console app.

    NB: Ideally the Key and IV/Nonce should be stored somewhere else but the main defence here is that 
        unauthorised third parties shouldn't have access to this file.
  -->

  <!-- 
    NB: Note that the first aspect endpoint with isPrimary=true will be used to query the list of option instruments,
        so it should be the Production instance if any of the target endpoints is for the Production server
  -->
  <!-- uploadMethod: Bulk | Standard. Chooses which upload web service to use addOptionPriceBulk or addOptionPrice -->
  <!-- aspectEnvironment should be one of Test | Staging | Production -->
  <!-- optional parameter aspectConfig.maxLogLevel: set this to limit the log level of that server (e.g. restrict Test to Warn) -->
  <aspectEndpoints>
    <servers>
      <aspectConfig aspectEnvironment="Test" uploadMethod="Standard" isPrimary="true" webServiceTimeoutMinutes="10" connectionFailureRetryCount="3" maxLogLevel="Debug">
        <credentials>
          <!--<encryptedCredentials encrypted="1X8ZzrkCqhvcU54aWK4B0r6LzZE8x7BhpT1KTOm0u1qhKl3wZ1FAB+IgNACJqTHV" key="2HgEHPJ+LE6NDXxYoR7KWa0+QU3Gp51zb9Xqnwd+E8k=" iv="g57vUGX0h8tMUfarTv2H5A==" />-->
          <plainTextCredentials username="kdrake" password="Hydrogen_42" />
        </credentials>
      </aspectConfig>
    </servers>
  </aspectEndpoints>
  
  <rabbitMqMessageSink host="amqp://soweywin21.sol.local" port="5672" vHost="/" exchange="prax.status.message" routingKey="prax.aspect.optionuploader.message">
    <credentials>
      <plainTextCredentials username="statusmessagewriter" password="g8oHtmgiBZ9iZZXvTdgw6CNldYdMP1ox" />
    </credentials>
  </rabbitMqMessageSink>

  <!-- We're using this hand-rolled config rather than standard mail server config settings to aid .NET core portability in the future -->
  <emailMessageSink 
    host="soweylx06.sol.local" 
    from="SA.PraxInterfaceSvc@stateoil.com" 
    to="mark.shield@prax.com"
    subject="Aspect Option Price Uploader" />

  <nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" autoReload="true" throwConfigExceptions="true" internalLogFile="c:/temp/aspect/optionuploader/nlogInternal.txt" internalLogToConsole="false" internalLogToTrace="true" internalLogLevel="Debug">
    <extensions>
      <add assembly="Nlog.RabbitMQ.Target" />
      <add assembly="Nlog.Targets.ElasticSearch" />
    </extensions>

    <variable name="logDirectory" value="c:/temp/aspect/optionuploader/logs/" />

    <variable name="rmqHost" value="soweywin21.sol.local" />
    <variable name="rmqExchange" value="dev.error.log" />
    <variable name="rmqPort" value="5672" />
    <variable name="rmqUser" value="errorlogwriter" />
    <variable name="rmqPassword" value="tc1eVWFln6A7N0RPpRTo0esXboc7uAbr" />
    <variable name="rmqvHost" value="/" />

    <targets async="true">
      <target name="mainLog" xsi:type="File" fileName="${logDirectory}/aspectUploaderLog_${shortdate}.txt" concurrentWrites="false" />
      <target name="debugLog" xsi:type="File" fileName="${logDirectory}/debug/aspectUploaderDebugLog_${shortdate}.txt" concurrentWrites="false" />
      <target name="rabbit" xsi:type="RabbitMQ" username="${rmqUser}" password="${rmqPassword}" hostname="${rmqHost}" exchange="${rmqExchange}" port="${rmqPort}" vhost="${rmqvHost}" useJSON="true" />
    </targets>
    <targets>
      <target name="console" xsi:type="ColoredConsole" detectConsoleAvailable="true" />
      <target name="debugger" xsi:type="Debugger" />
    </targets>
    <targets>
      <target name="logstash" xsi:type="BufferingWrapper" flushTimeout="2000">
        <target xsi:type="ElasticSearch" uri="http://SOL-ELK.sol.local:9200" index="logstash-${date:format=yyyy.MM.dd}" includeAllProperties="true">
          <field name="hostname" layout="${machinename}" />
          <field name="host" layout="${host-address}" />
        </target>
      </target>
    </targets>

    <rules>
      <logger name="*" minlevel="Trace" writeTo="debugger,console,debugLog" />
      <logger name="Prax.*" minlevel="Info" writeTo="mainLog" />
      <!--<logger name="Prax.*" minlevel="Debug" writeTo="logstash" />-->
      <logger name="Prax.*" minlevel="Error" writeTo="rabbit" />
    </rules>
  </nlog>


  <appSettings>   
  </appSettings>


  <runtime>

    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">

      <dependentAssembly>

        <assemblyIdentity name="Newtonsoft.Json" publicKeyToken="30ad4fe6b2a6aeed" culture="neutral" />

        <bindingRedirect oldVersion="0.0.0.0-11.0.0.0" newVersion="11.0.0.0" />

      </dependentAssembly>

      <dependentAssembly>

        <assemblyIdentity name="Topshelf" publicKeyToken="b800c4cfcdeea87b" culture="neutral" />

        <bindingRedirect oldVersion="0.0.0.0-4.0.0.0" newVersion="4.0.0.0" />

      </dependentAssembly>

      <dependentAssembly>

        <assemblyIdentity name="System.ValueTuple" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />

        <bindingRedirect oldVersion="0.0.0.0-4.0.3.0" newVersion="4.0.3.0" />

      </dependentAssembly>

      <dependentAssembly>

        <assemblyIdentity name="System.Collections.Immutable" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />

        <bindingRedirect oldVersion="0.0.0.0-1.2.3.0" newVersion="1.2.3.0" />

      </dependentAssembly>

      <dependentAssembly>

        <assemblyIdentity name="SimpleInjector" publicKeyToken="984cb50dea722e99" culture="neutral" />

        <bindingRedirect oldVersion="0.0.0.0-4.3.0.0" newVersion="4.3.0.0" />

      </dependentAssembly>

    </assemblyBinding>

  </runtime>
</configuration>
